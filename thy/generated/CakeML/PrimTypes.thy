chapter \<open>Generated by Lem from semantics/primTypes.lem.\<close>

theory "PrimTypes" 

imports 
 	 Main
	 "LEM.Lem_pervasives" 
	 "Lib" 
	 "Namespace" 
	 "Ast" 
	 "SemanticPrimitives" 
	 "Ffi" 
	 "Evaluate" 

begin 

(*open import Pervasives*)
(*open import Ast*)
(*open import SemanticPrimitives*)
(*open import Ffi*)
(*open import Namespace*)
(*open import Lib*)
(*open import Evaluate*)

(*val prim_types_program : prog*)
definition prim_types_program  :: "(top0)list "  where 
     " prim_types_program = (
  [Tdec  (Dexn unknown_loc (''Bind'') []),
   Tdec  (Dexn unknown_loc (''Chr'') []),
   Tdec  (Dexn unknown_loc (''Div'') []),
   Tdec  (Dexn unknown_loc (''Subscript'') []),
   Tdec  (Dtype unknown_loc [([], (''bool''), [((''false''), []), ((''true''), [])])]),
   Tdec  (Dtype unknown_loc [([([(char_of_nat 39), (CHR ''a'')])], (''list''), [((''nil''), []), ((''::''), [Tvar ([(char_of_nat 39), (CHR ''a'')]), Tapp [Tvar ([(char_of_nat 39), (CHR ''a'')])] (TC_name (Short (''list'')))]) ])]),
   Tdec (Dtype unknown_loc [([([(char_of_nat 39), (CHR ''a'')])], (''option''), [((''NONE''), []),((''SOME''), [Tvar ([(char_of_nat 39), (CHR ''a'')])]) ])]) ])"


(*val add_to_sem_env :
  forall 'ffi. Eq 'ffi => (state 'ffi * sem_env v) -> prog -> maybe (state 'ffi * sem_env v)*)
fun add_to_sem_env  :: " 'ffi state*(v)sem_env \<Rightarrow>(top0)list \<Rightarrow>('ffi state*(v)sem_env)option "  where 
     " add_to_sem_env (st, env) prog = (
  (case  fun_evaluate_prog st env prog of
    (st', Rval env') => Some (st', extend_dec_env env' env)
  | _ => None
  ))"


(*val prim_sem_env : forall 'ffi. Eq 'ffi => ffi_state 'ffi -> maybe (state 'ffi * sem_env v)*)
definition prim_sem_env  :: " 'ffi ffi_state \<Rightarrow>('ffi state*(v)sem_env)option "  where 
     " prim_sem_env ffi1 = (
  add_to_sem_env
    ((| clock =(( 0 :: nat)), refs = ([]), ffi = ffi1, defined_types = ({}), defined_mods = ({})  |),
     (| v = nsEmpty, c = nsEmpty |))
        prim_types_program )"

end
